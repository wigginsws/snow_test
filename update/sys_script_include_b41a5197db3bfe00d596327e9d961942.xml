<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_norca_med_cam.cam_OasisWebServiceUtils</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>cam_OasisWebServiceUtils</name>
        <script><![CDATA[var cam_OasisWebServiceUtils = Class.create();
cam_OasisWebServiceUtils.prototype = Object.extendsObject(cam_SoapWebServiceUtils, {
    initialize: function() {
    },

    type: 'cam_OasisWebServiceUtils',
	
	slLogger: new cam_ServiceLogger(),
	
	/**
	* Function processes a prepared SOAP Message
	**/
	processMessage: function( serviceName, messageName, params, currentGR, fieldExtractionMap) {
		gs.debug("[processMessage] serviceName: " + serviceName +", messageName: " + messageName);
		var s = new sn_ws.SOAPMessageV2(serviceName, messageName);
		for (var key in params) {
			if (params[key].escape) {
				s.setStringParameter(key, params[key].value);
			} else {
				s.setStringParameterNoEscape(key, params[key].value);
			}
		}
		
		var response = s.execute();
		response.waitForResponse( gs.getProperty( cam.SCOPE_ID + ".oasis_ws_timeout", 60) );
		this.slLogger.logMessage(s, serviceName, messageName, response, currentGR, "all");
		
		var responseBody = response.haveError() ? response.getErrorMessage() : response.getBody();
		var status = response.getStatusCode();
		if (status == 200 && !response.haveError()) {
			var xmlDoc = new XMLDocument2();
			xmlDoc.parseXML(responseBody);
			var statusCode = xmlDoc.getNodeText("//*[local-name()= 'MessageStatusCode']");
			if (statusCode && statusCode.toUpperCase()=="SUCCESS") {
				
				if (fieldExtractionMap) {
					for (var fieldName in fieldExtractionMap) {
						var fieldValue = xmlDoc.getNodeText(fieldExtractionMap[fieldName]);
						currentGR.setValue( fieldName, fieldValue);
						gs.debug("[processMessage] Extracted from response, fieldName: " + fieldName + ", fieldValue: " + fieldValue);
					}
				} else {
					gs.warn("[processMessage] No fieldExtractionMap, record not updated");
				}
			} else {
				throw "Web service failure - MessageStatusCode is " + statusCode;
			}

		} else {
			throw "Web service failure - HTTP Status " + status;
		}
	},
	
	
	getUserNameValueObject: function(currentGR) {
		var updatedBy = currentGR.getValue("sys_updated_by");
		var uname = gs.getProperty( cam.SCOPE_ID + ".oasis_test_user", updatedBy);
		
// 		if (uname) {
// 			uname = uname.toLowerCase();
// 			if (uname == "admin" || uname =="system") {
// 				uname = gs.getProperty("x_norca_med_cam.oasis_test_user");
// 			}
// 		}
		
		return this.createParamValueObject( uname );
	}
	
});
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>rrao</sys_created_by>
        <sys_created_on>2017-07-12 01:02:19</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>b41a5197db3bfe00d596327e9d961942</sys_id>
        <sys_mod_count>22</sys_mod_count>
        <sys_name>cam_OasisWebServiceUtils</sys_name>
        <sys_package display_value="Medical Claim Management" source="x_norca_med_cam">4427741adb53fe8023cdd92b5e961942</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Medical Claim Management">4427741adb53fe8023cdd92b5e961942</sys_scope>
        <sys_update_name>sys_script_include_b41a5197db3bfe00d596327e9d961942</sys_update_name>
        <sys_updated_by>rrao</sys_updated_by>
        <sys_updated_on>2017-11-02 01:50:05</sys_updated_on>
    </sys_script_include>
</record_update>
