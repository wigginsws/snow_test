<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_norca_med_cam.cam_IRWebServiceUtils</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>cam_IRWebServiceUtils</name>
        <script><![CDATA[var cam_IRWebServiceUtils = Class.create();
cam_IRWebServiceUtils.prototype = Object.extendsObject(cam_SoapWebServiceUtils, {
	
	initialize: function() {
	},
	
	type: 'cam_IRWebServiceUtils',
	
	slLogger: new cam_ServiceLogger(),
	
	/**
 	* Description: Login to ImageRight and create an API token
 	* Parameters: None
 	* Returns: An API token string
 	*/
	login: function(relatedRecord) {
		var sessionToken;
		var fn = function(responseXml) {
			sessionToken = responseXml.getNodeText("/soap:Envelope/soap:Body/UserLoginResponse/UserLoginResult");
		};
		var params = {
			'UserLogin.connName': this.createParamValueObject( gs.getProperty(cam.SCOPE_ID + ".ir_ws_connection")),
			'UserLogin.password': this.createParamValueObject( gs.getProperty(cam.SCOPE_ID + ".ir_ws_password")),
			'UserLogin.username': this.createParamValueObject( gs.getProperty(cam.SCOPE_ID + ".ir_ws_username"))
		};
		this.processMessageWithFunction( cam.SCOPE_ID + ".CAM-ImageRight-All", "IRWebService40Soap.UserLogin", params, relatedRecord, fn);
		gs.debug("[irLogin] Generated token " + sessionToken);
		return sessionToken;
	},
	
	
	/**
 	* Description: Logoff from ImageRight. Required to terminate a session and release resources.
 	* Parameters: Previously acquired Session Token
 	* Returns: True/False indicating successful logoff
 	*/
	logoff: function(sessionToken, relatedRecord) {
		var loginSuccess = false;
		var fn = function(responseXml) {
			loginSuccess = responseXml.getNodeText("/soap:Envelope/soap:Body/UserLogoffResponse/UserLogoffResult")=="true";
		};
		var params = {
			'UserLogoff.securityToken': this.createParamValueObject(sessionToken)
		};
		this.processMessageWithFunction( cam.SCOPE_ID + ".CAM-ImageRight-All", "IRWebService40Soap.UserLogoff", params, relatedRecord, fn);
		gs.debug("[irLogoff] Logoff " + loginSuccess?"successful":"failed");
		return loginSuccess;
	},
	
	
	
	/**
	* Description: Get the contents (File) for a document description previously retrieved
	* Parameters: 
	* 1. GlideRecord containing document
	* 2. Optional IR securityToken
	* Returns:
	* Encoded byte stream
	*/
	getDocumentContents: function(currentGR, securityToken) {
		gs.debug("[getDocumentContents] currentGR: " + currentGR.getDisplayValue() + ", securityToken: " + securityToken);
		
		var logOff = false;
		if (!securityToken) {
			securityToken = this.login(currentGR);
			logOff = true;
		}
		
		var fn = function(responseXml, currentGR) {
			var fileId = "id:" + currentGR.sor_id + ", refId:" + currentGR.sor_reference_id;
			gs.debug("[getDocumentContents] fn called by processMessage for file " + fileId);
			var encodedContents = responseXml.getNodeText("//GetMultiPageImageFileUsingPagesResult");
			return encodedContents;
		};
		
		var pageDataXml = "";
		var pageData = currentGR.page_data ? JSON.parse(currentGR.page_data) : [];
		for (var i = 0; i<pageData.length; i++) {
			pageDataXml += "<imag:PageRef><imag:Id>" + pageData[i].Id.Id + "</imag:Id><imag:RefId>" + pageData[i].Id.RefId + "</imag:RefId></imag:PageRef>";
		}
		
		var params = {
			'GetMultiPageImageFileUsingPages.securityToken': this.createParamValueObject(securityToken),
			'GetMultiPageImageFileUsingPages.outputType': this.createParamValueObject( gs.getProperty(cam.SCOPE_ID + ".ir_ws_file_output_format") ),
			'GetMultiPageImageFileUsingPages.pageRefs': this.createParamValueObject(pageDataXml)
		};
		
		try {
			return this.processMessageWithFunction( cam.SCOPE_ID + ".CAM-ImageRight-All", "IRWebService40Soap.GetMultiPageImageFileUsingPages-CAM", params, currentGR, fn, null, "request");
		} finally {
			try {
				if (logOff) {
					this.logoff(securityToken, currentGR);
				}
			} catch (e) {
				gs.warn("[getDocumentContents] Could not log off from IR. Ignoring, but frequent errors may cause session bloat. Error message: " + e);
			}
		}
		
	},
	
	
	
	/**
 	* Description:
 	* Parameters:
 	* Returns:
 	*/
	getDocumentsForCase: function(caseNumber, currentGR, securityToken) {
		gs.debug("[getDocumentsForCase] caseNumber: " + caseNumber + ", securityToken: " + securityToken);
		
		var logOff = false;
		if (!securityToken) {
			securityToken = this.login(currentGR);
			logOff = true;
		}
		
		var fn = function(responseXml, currentGR) {
			var documents = [];
			var responseJson;
			var resultNode = responseXml.getFirstNode("//FindDocumentsResult");
			if (resultNode) {
				responseJson = gs.xmlToJSON(resultNode);
				if (responseJson.FindDocumentsResult && responseJson.FindDocumentsResult.Document) {
					documents = responseJson.FindDocumentsResult.Document;
					
				}
			}
			return documents;
		};
		
		var params = {
			'FindDocuments.securityToken': this.createParamValueObject(securityToken),
			'FindDocuments.locationId': this.createParamValueObject('-1'),
			'FindDocuments.fileNumber': this.createParamValueObject(caseNumber),
			'FindDocuments.includePageData': this.createParamValueObject( 'true'),
			'FindDocuments.includeDeleted': this.createParamValueObject('false')
		};
		
		try {
			return this.processMessageWithFunction( cam.SCOPE_ID + ".CAM-ImageRight-All", "IRWebService40Soap.FindDocuments.Case", params, currentGR, fn);
		} finally {
			try {
				if (logOff) {
					this.logoff(securityToken, currentGR);
				}
			} catch (e) {
				gs.warn("[getDocumentsForCase] Could not log off from IR. Ignoring, but frequent errors may cause session bloat. Error message: " + e);
			}
		}
		
	},
	
	
	/**
	* Description: Gets Folder for a Document
	*
	**/
	getParentFolder: function(objectId, currentGR, securityToken) {
		//var objectId = currentGR.getValue("sor_reference_id");
		gs.debug("[getParentFolder] Getting folder for " + objectId);
		if (!objectId)
			return null;
		
		var logOff = false;
		if (!securityToken) {
			securityToken = this.login(currentGR);
			logOff = true;
		}
		
		var fn = function(responseXml, currentGR) {
			
			var folder = {};
			var responseJson;
			var resultNode = responseXml.getFirstNode("//GetParentResult");
			if (resultNode) {
				responseJson = gs.xmlToJSON(resultNode);
				if (responseJson.GetParentResult) {
					var prop;
					for (prop in responseJson.GetParentResult) {
						folder[prop] = responseJson.GetParentResult[prop];
					}
				}
			}
			return folder;
		};
		
		var params = {
			'GetParent.securityToken': this.createParamValueObject(securityToken),
			'GetParent.objectId': this.createParamValueObject(objectId)
		};
		
		try {
			return this.processMessageWithFunction( cam.SCOPE_ID + ".CAM-ImageRight-All", "IRWebService40Soap12.GetParent", params, currentGR, fn);
		} finally {
			try {
				if (logOff == "true") {
					this.logoff(securityToken, currentGR);
				}
			} catch (e) {
				gs.warn("[getParentFolder] Could not log off from IR. Ignoring, but frequent errors may cause session bloat. Error message: " + e);
			}
		}
	},
	
	
	/**
 	* Description:
 	* Parameters:
 	* Returns:
 	*/
	getNotesForCase: function(caseNumber, currentGR, securityToken) {
		gs.debug("[getNotesForCase] caseNumber: " + caseNumber + ", securityToken: " + securityToken);
		
		var logOff = false;
		if (!securityToken) {
			securityToken = this.login(currentGR);
			logOff = true;
		}
		
		var fn = function(responseXml, currentGR) {
			
			var notes = [];
			var responseJson;
			var resultNode = responseXml.getFirstNode("//FindFilesResult");
			if (resultNode) {
				responseJson = gs.xmlToJSON(resultNode);
				if (responseJson.FindFilesResult && responseJson.FindFilesResult.File && responseJson.FindFilesResult.File.NoteCollection && responseJson.FindFilesResult.File.NoteCollection.Notes) {
					notes = responseJson.FindFilesResult.File.NoteCollection.Notes;
				}
			}
			return notes;
		};
		
		var params = {
			'FindFiles.securityToken': this.createParamValueObject(securityToken),
			'FindFiles.locationId': this.createParamValueObject('-1'),
			'FindFiles.fileNumber': this.createParamValueObject(caseNumber),
			'FindFiles.getContent': this.createParamValueObject( 'true'),
			'FindFiles.includeDeleted': this.createParamValueObject('false')
		};
		
		try {
			return this.processMessageWithFunction( cam.SCOPE_ID + ".CAM-ImageRight-All", "IRWebService40Soap12.FindFiles-CAM", params, currentGR, fn);
		} finally {
			try {
				if (logOff) {
					this.logoff(securityToken, currentGR);
				}
			} catch (e) {
				gs.warn("[getNotesForCase] Could not log off from IR. Ignoring, but frequent errors may cause session bloat. Error message: " + e);
			}
		}
		
	},
	
	
	/**
 	* Description:
 	* Parameters:
 	* Returns:
 	*/
	getUser: function(userId, currentGR, securityToken) {
		gs.debug("[getUserById] userId: " + userId + ", securityToken: " + securityToken);
		
		var logOff = false;
		if (!securityToken) {
			securityToken = this.login(currentGR);
			logOff = true;
		}
		
		var fn = function(responseXml, currentGR) {
			var userRecord = [];
			var responseJson;
			var resultNode = responseXml.getFirstNode("//GetUserResult");
			if (resultNode) {
				responseJson = gs.xmlToJSON(resultNode);
				if (responseJson.GetUserResult) {
					userRecord = responseJson.GetUserResult;
				}
			}
			return userRecord;
		};
		
		var params = {
			'GetUser.securityToken': this.createParamValueObject(securityToken),
			'id.Id': this.createParamValueObject(userId),
			'id.HasId': this.createParamValueObject("true")
		};
		
		try {
			return this.processMessageWithFunction( cam.SCOPE_ID + ".CAM-ImageRight-All", "IRWebService40Soap12.GetUser-CAM", params, currentGR, fn);
		} finally {
			try {
				if (logOff) {
					this.logoff(securityToken, currentGR);
				}
			} catch (e) {
				gs.warn("[getUserById] Could not log off from IR. Ignoring, but frequent errors may cause session bloat. Error message: " + e);
			}
		}
		
	},
	
	
	/**
 	* Function processes a prepared SOAP Message
 	**/
	processMessageWithFunction: function( serviceName, messageName, params, currentGR, fn, responseFormat, logPayloadOption) {
		gs.debug("[processMessageFn] serviceName: " + serviceName +", messageName: " + messageName);
		var s = new sn_ws.SOAPMessageV2(serviceName, messageName);
		for (var key in params) {
			if (params[key].escape) {
				s.setStringParameter(key, params[key].value);
			} else {
				s.setStringParameterNoEscape(key, params[key].value);
			}
		}
		
		var response = s.execute();
		response.waitForResponse(gs.getProperty( cam.SCOPE_ID + ".ir_ws_timeout", 60));
		this.slLogger.logMessage(s, serviceName, messageName, response, currentGR, logPayloadOption?logPayloadOption:"all");
		
		var responseBody = response.haveError() ? response.getErrorMessage() : response.getBody();
		var status = response.getStatusCode();
		if (status == 200 && !response.haveError()) {
			if (responseFormat=="raw") {
				return responseBody; // don't debug log raw output
			}
			var xmlDoc = new XMLDocument2();
			xmlDoc.parseXML(responseBody);
			return fn(xmlDoc, currentGR);
			
		} else {
			throw "Web service failure - HTTP Status " + status;
		}
	},
	
	
});
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>rrao</sys_created_by>
        <sys_created_on>2017-07-14 02:17:31</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>fdd00484dbc04340d596327e9d96197c</sys_id>
        <sys_mod_count>67</sys_mod_count>
        <sys_name>cam_IRWebServiceUtils</sys_name>
        <sys_package display_value="Medical Claim Management" source="x_norca_med_cam">4427741adb53fe8023cdd92b5e961942</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Medical Claim Management">4427741adb53fe8023cdd92b5e961942</sys_scope>
        <sys_update_name>sys_script_include_fdd00484dbc04340d596327e9d96197c</sys_update_name>
        <sys_updated_by>rrao</sys_updated_by>
        <sys_updated_on>2017-11-02 01:49:06</sys_updated_on>
    </sys_script_include>
</record_update>
