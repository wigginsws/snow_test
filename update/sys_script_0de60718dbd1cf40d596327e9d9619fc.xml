<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_norca_med_cam_entity</collection>
        <condition/>
        <description>Add/Update Entity Class records when Classification list is updated</description>
        <execute_function>false</execute_function>
        <filter_condition table="x_norca_med_cam_entity">sys_updated_by!=oasissn^EQ<item endquery="false" field="sys_updated_by" goto="false" newquery="false" operator="!=" or="false" value="oasissn"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>CAM-ENTITY-Update Entity Class</name>
        <order>1100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	var currentList = [];
	if (current.getValue("classification")) currentList = current.getValue("classification").replace(" ", "").split(",");
	
	var previousList = [];
	if (previous && previous.getValue("classification")) previousList = previous.getValue("classification").replace(" ", "").split(",");
	
	if (gs.isDebugging()) gs.debug("[updateClasses] For Entity: " + current.getDisplayValue() + ", currentList: " + JSON.stringify(currentList) + ", previousList: " + JSON.stringify(previousList));
	
	var isAdded = function (currentVal) {
		return previousList.indexOf(currentVal)<0;
	};
	
	var isRemoved = function (prevVal) {
		return currentList.indexOf(prevVal)<0;
	};
	
	var effectiveValues = currentList; //.filter(isAdded);
	var ineffectiveValues = previousList.filter(isRemoved);
	
	if (gs.isDebugging()) gs.debug("[updateClasses] For Entity: " + current.getDisplayValue() + ", effectiveValues: " + JSON.stringify(effectiveValues) + ", ineffectiveValues: " + JSON.stringify(ineffectiveValues));
	
	if (effectiveValues.length>0 || ineffectiveValues.length>0) {
		var camDataSyncUtils = new cam_DataSyncUtils();
		
		var filteredEffectiveValues = [];
		var gr = new GlideRecord("x_norca_med_cam_entity_class");
		gr.addQuery("entity", current.getUniqueValue());
		gr.query();
		if (gr.getRowCount()==0) {
			filteredEffectiveValues = effectiveValues;
			gs.debug("[updateClasses] For Entity: " + current.getDisplayValue() + ", query did not return entity_class records adding all effective.");
		} else {
			filteredEffectiveValues = effectiveValues;
			
			while (gr.next()) {
				if (camDataSyncUtils.isRecordEffectiveSimple(gr, "effective_from", "effective_to")) {
					var classType = gr.getValue("class_type");

					
					// check if effective value is already there
					var idx = filteredEffectiveValues.indexOf(classType);
					if (idx>=0) {
						filteredEffectiveValues.splice(idx, 1);
					} else {
					
						// check if an ineffective value is there, if so, expire
						idx = ineffectiveValues.indexOf(classType);
						if (idx>=0) {
							var gdt = new GlideDateTime(); // gs.yesterday()
							gr.setValue("effective_to", gdt.getDate());
							//gr.autoSysFields(false);
							//gr.setWorkflow(false);
							gr.update();
							if (gs.isDebugging()) gs.debug("[updateClasses] Entity: " + current.getDisplayValue() + ", Expired Class: " + gr.getDisplayValue());
						}
					}

				}

			}
		}
		
		if (gs.isDebugging()) gs.debug("[updateClasses] Entity: " + current.getDisplayValue() + ", Adding filteredEffectiveValues: " + JSON.stringify(filteredEffectiveValues));
		var today = new GlideDate().getValue();
		for (var i=0; i<filteredEffectiveValues.length; i++) {
			gr.initialize();
			gr.setValue("entity", current.getUniqueValue());
			gr.setValue("class_type", filteredEffectiveValues[i]);
			gr.setValue("effective_from", today);
			gr.setValue("effective_to", "3000-01-01");
			gr.insert();
		}
		
	}

})(current, previous);
]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>rrao</sys_created_by>
        <sys_created_on>2017-09-15 14:41:22</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>0de60718dbd1cf40d596327e9d9619fc</sys_id>
        <sys_mod_count>24</sys_mod_count>
        <sys_name>CAM-ENTITY-Update Entity Class</sys_name>
        <sys_overrides/>
        <sys_package display_value="Medical Claim Management" source="x_norca_med_cam">4427741adb53fe8023cdd92b5e961942</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Medical Claim Management">4427741adb53fe8023cdd92b5e961942</sys_scope>
        <sys_update_name>sys_script_0de60718dbd1cf40d596327e9d9619fc</sys_update_name>
        <sys_updated_by>jpolk</sys_updated_by>
        <sys_updated_on>2017-10-26 18:06:29</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=0de60718dbd1cf40d596327e9d9619fc"/>
</record_update>
